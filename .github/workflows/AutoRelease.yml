name: Windows

on: 
  push:
  pull_request:
  release:
    types: [published]

jobs:
  build:
    runs-on: windows-latest
    env:
      RELEASE_NAME: 7HD-Dino-v1.5
      GNUTARGET: default

    steps:
    - name: Checkout
      uses: actions/checkout@master
    
    - name: Setup Release Version
      run: |
        echo "RELEASE_NAME=7HD-Dino-v1.5_${{ github.event.release.tag_name }}" >> $GITHUB_ENV
      shell: bash
      if: github.event_name == 'release' && github.event.action == 'published'

    - name: Setup Environment
      run: | 
        dir
        mkdir Build
        cd Build
        mkdir ${{ env.RELEASE_NAME }}
        cd ../../Dino
        dir
        
    # Setup MSBuild.exe path if required
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Build Solution (MSVC16)
      run: |
        msbuild.exe Development.sln  /property:Configuration=Release
        copy /Y Build\Release\Dino.exe Build\${{ env.RELEASE_NAME }}\Dino.exe
      shell: cmd
      
    - name: Generate Artifacts
      run: |
        robocopy .\Output .\Build\${{ env.RELEASE_NAME }}\Output /S
        robocopy .\build\${{ env.RELEASE_NAME }} .\Build\${{ env.RELEASE_NAME }}\Output Dino.exe /MOVE
        copy /Y .\README.md .\Build\${{ env.RELEASE_NAME }}\README.md
        copy /Y .\LICENSE .\Build\${{ env.RELEASE_NAME }}\LICENSE
        cd Build
        dir
      shell: cmd
       #    7z a ./${{ env.RELEASE_NAME }}.zip ./${{ env.RELEASE_NAME }}   
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.RELEASE_NAME }}
        path: ./Build/${{ env.RELEASE_NAME }}
        
    - name: Upload Artifact to Release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./Build/${{ env.RELEASE_NAME }}
          asset_name: ${{ env.RELEASE_NAME }}
          asset_content_type: application/zip
      if: github.event_name == 'release' && github.event.action == 'published'


   #   # We are generating the zip excluding the gitignore (or any other file specified in the exclusions)
   # - uses: actions/checkout@v2
   # - name: Zip Generator
   #   uses: thedoctor0/zip-release@master
   #   with:
   #    filename: 'Dino.zip'
   #    exclusions: '*.gitignore*'

     # Creates a release uploading the release.zip file. The github token is usually under secrets.GITHUB_TOKEN, however in the future this may be different.
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
       tag: v1.5
       artifacts: ./Build/${{ env.RELEASE_NAME }}.zip
       token: ${{ secrets.GITHUB_TOKEN }}
